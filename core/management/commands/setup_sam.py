#!/usr/bin/env python
"""
Script de configuraci√≥n para SAM Metrolog√≠a
Ejecutar despu√©s de aplicar las migraciones para configurar el entorno
"""

import os
import sys
import django
from django.core.management import execute_from_command_line
from django.core.management.base import BaseCommand
from django.core.cache import cache
from django.conf import settings

# Configurar Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'proyecto_c.settings')
django.setup()


class Command(BaseCommand):
    help = 'Configura el entorno de SAM Metrolog√≠a despu√©s de la instalaci√≥n'

    def add_arguments(self, parser):
        parser.add_argument(
            '--skip-cache',
            action='store_true',
            help='Omitir configuraci√≥n de cache',
        )
        parser.add_argument(
            '--skip-indexes',
            action='store_true', 
            help='Omitir verificaci√≥n de √≠ndices',
        )

    def handle(self, *args, **options):
        self.stdout.write(
            self.style.SUCCESS('üöÄ Configurando SAM Metrolog√≠a...')
        )

        # 1. Crear tabla de cache si se usa DatabaseCache
        if not options['skip_cache']:
            self.setup_cache()

        # 2. Verificar √≠ndices cr√≠ticos
        if not options['skip_indexes']:
            self.verify_indexes()

        # 3. Crear directorios necesarios
        self.create_directories()

        # 4. Verificar configuraci√≥n de archivos
        self.verify_file_config()

        # 5. Crear superusuario si no existe
        self.setup_superuser()

        self.stdout.write(
            self.style.SUCCESS('‚úÖ Configuraci√≥n completada exitosamente!')
        )

    def setup_cache(self):
        """Configurar cache de base de datos si es necesario"""
        self.stdout.write('üì¶ Configurando cache...')
        
        try:
            # Verificar si se usa cache de base de datos
            cache_backend = settings.CACHES['default']['BACKEND']
            
            if 'DatabaseCache' in cache_backend:
                self.stdout.write('   Creando tabla de cache...')
                execute_from_command_line([
                    'manage.py', 'createcachetable', 
                    settings.CACHES['default']['LOCATION']
                ])
                self.stdout.write('   ‚úì Tabla de cache creada')
            
            # Probar conexi√≥n de cache
            cache.set('test_key', 'test_value', 30)
            if cache.get('test_key') == 'test_value':
                cache.delete('test_key')
                self.stdout.write('   ‚úì Cache funcionando correctamente')
            else:
                self.stdout.write(
                    self.style.WARNING('   ‚ö† Cache no est√° funcionando correctamente')
                )
                
        except Exception as e:
            self.stdout.write(
                self.style.ERROR(f'   ‚ùå Error configurando cache: {str(e)}')
            )

    def verify_indexes(self):
        """Verificar que los √≠ndices cr√≠ticos existen"""
        self.stdout.write('üîç Verificando √≠ndices de base de datos...')
        
        try:
            from django.db import connection
            
            critical_indexes = [
                'idx_equipo_empresa_estado',
                'idx_equipo_proxima_calibracion', 
                'idx_calibracion_fecha',
                'idx_mantenimiento_fecha',
                'idx_comprobacion_fecha'
            ]
            
            with connection.cursor() as cursor:
                # Para PostgreSQL
                if 'postgresql' in settings.DATABASES['default']['ENGINE']:
                    cursor.execute("""
                        SELECT indexname FROM pg_indexes 
                        WHERE tablename LIKE 'core_%'
                    """)
                # Para SQLite
                elif 'sqlite' in settings.DATABASES['default']['ENGINE']:
                    cursor.execute("""
                        SELECT name FROM sqlite_master 
                        WHERE type='index' AND name LIKE 'idx_%'
                    """)
                else:
                    self.stdout.write('   ‚ö† Tipo de base de datos no soportado para verificaci√≥n de √≠ndices')
                    return
                
                existing_indexes = [row[0] for row in cursor.fetchall()]
                
                for index in critical_indexes:
                    if index in existing_indexes:
                        self.stdout.write(f'   ‚úì {index}')
                    else:
                        self.stdout.write(
                            self.style.WARNING(f'   ‚ö† √çndice faltante: {index}')
                        )
                        
        except Exception as e:
            self.stdout.write(
                self.style.ERROR(f'   ‚ùå Error verificando √≠ndices: {str(e)}')
            )

    def create_directories(self):
        """Crear directorios necesarios"""
        self.stdout.write('üìÅ Creando directorios...')
        
        directories = [
            settings.BASE_DIR / 'logs',
            settings.BASE_DIR / 'media',
            settings.BASE_DIR / 'staticfiles',
        ]
        
        # Solo crear directorio media si no se usa S3
        if not hasattr(settings, 'AWS_STORAGE_BUCKET_NAME') or not settings.AWS_STORAGE_BUCKET_NAME:
            directories.append(settings.BASE_DIR / 'media' / 'pdfs')
            directories.append(settings.BASE_DIR / 'media' / 'imagenes_equipos')
            directories.append(settings.BASE_DIR / 'media' / 'empresas_logos')
        
        for directory in directories:
            try:
                directory.mkdir(parents=True, exist_ok=True)
                self.stdout.write(f'   ‚úì {directory}')
            except Exception as e:
                self.stdout.write(
                    self.style.ERROR(f'   ‚ùå Error creando {directory}: {str(e)}')
                )

    def verify_file_config(self):
        """Verificar configuraci√≥n de archivos"""
        self.stdout.write('üìÑ Verificando configuraci√≥n de archivos...')
        
        # Verificar configuraci√≥n S3 si est√° habilitada
        if hasattr(settings, 'AWS_STORAGE_BUCKET_NAME') and settings.AWS_STORAGE_BUCKET_NAME:
            required_aws_settings = [
                'AWS_ACCESS_KEY_ID',
                'AWS_SECRET_ACCESS_KEY', 
                'AWS_STORAGE_BUCKET_NAME',
                'AWS_S3_REGION_NAME'
            ]
            
            missing_settings = []
            for setting in required_aws_settings:
                if not hasattr(settings, setting) or not getattr(settings, setting):
                    missing_settings.append(setting)
            
            if missing_settings:
                self.stdout.write(
                    self.style.ERROR(f'   ‚ùå Configuraci√≥n S3 incompleta: {missing_settings}')
                )
            else:
                self.stdout.write('   ‚úì Configuraci√≥n S3 completa')
        else:
            self.stdout.write('   ‚úì Usando almacenamiento local')
        
        # Verificar l√≠mites de archivos
        limits = getattr(settings, 'SAM_CONFIG', {})
        max_size = limits.get('MAX_FILE_SIZE_MB', 10)
        self.stdout.write(f'   ‚úì L√≠mite m√°ximo de archivos: {max_size}MB')

    def setup_superuser(self):
        """Crear superusuario inicial si no existe"""
        self.stdout.write('üë§ Verificando superusuario...')
        
        try:
            from core.models import CustomUser
            
            if not CustomUser.objects.filter(is_superuser=True).exists():
                self.stdout.write(
                    self.style.WARNING('   ‚ö† No hay superusuarios. Creando usuario admin por defecto...')
                )
                
                # Crear superusuario por defecto
                admin_user = CustomUser.objects.create_superuser(
                    username='admin',
                    email='admin@sammetrologia.com',
                    password='admin123',  # Cambiar en producci√≥n
                    first_name='Administrador',
                    last_name='Sistema'
                )
                
                self.stdout.write(
                    self.style.SUCCESS('   ‚úì Usuario admin creado (username: admin, password: admin123)')
                )
                self.stdout.write(
                    self.style.WARNING('   ‚ö† IMPORTANTE: Cambiar contrase√±a en producci√≥n')
                )
            else:
                superusers_count = CustomUser.objects.filter(is_superuser=True).count()
                self.stdout.write(f'   ‚úì {superusers_count} superusuario(s) encontrado(s)')
                
        except Exception as e:
            self.stdout.write(
                self.style.ERROR(f'   ‚ùå Error configurando superusuario: {str(e)}')
            )


def main():
    """Funci√≥n principal para ejecutar desde l√≠nea de comandos"""
    if __name__ == '__main__':
        # Ejecutar como comando de Django
        execute_from_command_line(['manage.py', 'setup_sam'] + sys.argv[1:])


# Script ejecutable independiente
if __name__ == '__main__':
    print("üöÄ Configurando SAM Metrolog√≠a...")
    
    # Verificar que estamos en el directorio correcto
    if not os.path.exists('manage.py'):
        print("‚ùå Error: Este script debe ejecutarse desde el directorio ra√≠z del proyecto Django")
        sys.exit(1)
    
    # Ejecutar migraciones primero
    print("üì¶ Aplicando migraciones...")
    os.system('python manage.py migrate')
    
    # Ejecutar recolecci√≥n de archivos est√°ticos
    print("üì¶ Recolectando archivos est√°ticos...")
    os.system('python manage.py collectstatic --noinput')
    
    # Ejecutar nuestro comando personalizado
    main()